# syntax=docker/dockerfile:1.7
# Haskell Layer: GHC 9.12.2 with native WASM support
# This layer is parallel to the TeX layer, both built on Ubuntu base
# Can be combined with TeX layer when needed (e.g., for HASM applications)
ARG BASE_IMAGE=ghcr.io/git-steb/haskell-tex-dev:base-latest
FROM ${BASE_IMAGE}

# Build arguments for flexible toolchain versions
# VERSION is read from the VERSION file in the repository root
ARG VERSION

# Load version definitions from versions.env
COPY build_context/versions.env /tmp/versions.env
RUN set -a && . /tmp/versions.env && set +a && \
    echo "Loaded versions: VERSION=$VERSION, GHC_VERSION=$GHC_VERSION, CABAL_VERSION=$CABAL_VERSION" && \
    echo "🔍 Debug: GHC_VERSION variable value: '$GHC_VERSION'"

# Root for system dependencies
USER root
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    libffi-dev \
    libffi8 \
    libgmp-dev \
    libgmp10 \
    libncurses-dev \
    pkg-config \
    python3 \
    python3-pip \
    python3-venv \
    nodejs \
    npm \
    zlib1g-dev \
    libssl-dev \
    libcurl4-openssl-dev \
    jq \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Note: jq, curl, ca-certificates, gnupg, and gh are now installed in the base image
# for better layer caching and faster CI builds

# Add GHCup and Cabal bin to PATH

# Install specific Haskell toolchain versions
USER dev
# Note: GHC 9.12.2 uses Ubuntu 22.04 packages (Ubuntu 24.04 packages not yet available)
RUN curl -fsSL https://get-ghcup.haskell.org | BOOTSTRAP_HASKELL_NONINTERACTIVE=1 BOOTSTRAP_HASKELL_MINIMAL=1 GHCUP_INSTALL_BASE_PREFIX=/home/dev sh
ENV PATH="/home/dev/.ghcup/bin:$PATH"
RUN ghcup install cabal ${CABAL_VERSION} && ghcup set cabal ${CABAL_VERSION}
RUN ghcup install stack ${STACK_VERSION} && ghcup set stack ${STACK_VERSION}
RUN echo "🔍 Debug: Installing GHC version: ${GHC_VERSION}" && \
    ghcup install ghc ${GHC_VERSION} && ghcup set ghc ${GHC_VERSION}
RUN ghc --supported-targets | grep -i wasm || echo "WASM target not found"

# Install WASM GHC toolchain via ghcup
# This enables compilation to WebAssembly for web demos and embedded use
RUN echo "🔧 Setting up WASM toolchain via ghcup..." && \
    # Install WASM SDK and tools using the bootstrap method
    curl https://gitlab.haskell.org/haskell-wasm/ghc-wasm-meta/-/raw/master/bootstrap.sh | SKIP_GHC=1 sh && \
    # Add WASM release channel to ghcup
    ghcup config add-release-channel https://gitlab.haskell.org/haskell-wasm/ghc-wasm-meta/-/raw/master/ghcup-wasm-0.0.9.yaml && \
    # Set up environment for WASM toolchain (similar to macOS setup)
    export PATH="${HOME}/.ghc-wasm/wasi-sdk/bin:$PATH" && \
    export WASI_SYSROOT="${HOME}/.ghc-wasm/wasi-sdk/share/wasi-sysroot" && \
    export CC="${HOME}/.ghc-wasm/wasi-sdk/bin/clang" && \
    export CXX="${HOME}/.ghc-wasm/wasi-sdk/bin/clang++" && \
    export AR="${HOME}/.ghc-wasm/wasi-sdk/bin/llvm-ar" && \
    export NM="${HOME}/.ghc-wasm/wasi-sdk/bin/llvm-nm" && \
    export RANLIB="${HOME}/.ghc-wasm/wasi-sdk/bin/llvm-ranlib" && \
    export STRIP="${HOME}/.ghc-wasm/wasi-sdk/bin/llvm-strip" && \
    # Create missing tool symlinks that the configure script expects
    ln -sf ~/.ghc-wasm/wasi-sdk/bin/nm ~/.ghc-wasm/wasi-sdk/bin/wasm32-wasi-nm && \
    ln -sf ~/.ghc-wasm/wasi-sdk/bin/strip ~/.ghc-wasm/wasi-sdk/bin/wasm32-wasi-strip && \
    # Debug: Check what tools are available
    echo "🔍 Debug: Checking WASM tools..." && \
    ls -la ~/.ghc-wasm/wasi-sdk/bin/ | grep -E "(nm|strip|clang|wasm)" && \
    echo "🔍 Debug: Environment variables:" && \
    echo "PATH: $PATH" | tr ':' '\n' | grep -E "(ghc-wasm|wasi)" && \
    echo "WASI_SYSROOT: $WASI_SYSROOT" && \
    echo "CC: $CC" && \
    echo "CXX: $CXX" && \
    # Try WASM GHC installation with proper environment
    echo "🔧 Attempting WASM GHC installation..." && \
    if ghcup install ghc wasm32-wasi-9.12.20250327 --verbose; then \
        echo "✅ WASM GHC toolchain installed successfully"; \
    else \
        echo "⚠️  WASM GHC installation failed, trying alternative approach..." && \
        # Try without explicit host specification (let ghcup auto-detect)
        if ghcup install ghc wasm32-wasi-9.12.20250327 --verbose --no-set; then \
            echo "✅ WASM GHC toolchain installed successfully (alternative method)"; \
        else \
            echo "⚠️  WASM GHC installation failed, capturing detailed logs..." && \
            echo "📋 GHCup logs directory:" && \
            ls -la /home/dev/.ghcup/logs/ 2>/dev/null || echo "No logs directory found" && \
            echo "📋 Recent log files:" && \
            find /home/dev/.ghcup/logs/ -name "*.log" -type f -exec ls -la {} \; 2>/dev/null | tail -10 || echo "No log files found" && \
            echo "📋 Latest log content:" && \
            find /home/dev/.ghcup/logs/ -name "*.log" -type f -exec tail -50 {} \; 2>/dev/null | head -100 || echo "No log content found" && \
            echo "📋 Config.log from GHC installation (if exists):" && \
            find /home/dev/.ghcup/tmp/ -name "config.log" -type f -exec cat {} \; 2>/dev/null | head -100 || echo "No config.log found" && \
            echo "⚠️  Continuing without WASM GHC - you can install it manually later" && \
            echo "💡 To install manually: ghcup install ghc wasm32-wasi-9.12.20250327"; \
        fi; \
    fi

# Set up WASM environment variables for all sessions
RUN echo 'export PATH="${HOME}/.ghc-wasm/wasi-sdk/bin:$PATH"' >> ~/.bashrc && \
    echo 'export WASI_SYSROOT="${HOME}/.ghc-wasm/wasi-sdk/share/wasi-sysroot"' >> ~/.bashrc && \
    echo 'export CC="${HOME}/.ghc-wasm/wasi-sdk/bin/clang"' >> ~/.bashrc && \
    echo 'export CXX="${HOME}/.ghc-wasm/wasi-sdk/bin/clang++"' >> ~/.bashrc && \
    echo 'export AR="${HOME}/.ghc-wasm/wasi-sdk/bin/llvm-ar"' >> ~/.bashrc && \
    echo 'export NM="${HOME}/.ghc-wasm/wasi-sdk/bin/llvm-nm"' >> ~/.bashrc && \
    echo 'export RANLIB="${HOME}/.ghc-wasm/wasi-sdk/bin/llvm-ranlib"' >> ~/.bashrc && \
    echo 'export STRIP="${HOME}/.ghc-wasm/wasi-sdk/bin/llvm-strip"' >> ~/.bashrc

ENV PATH="/home/dev/.cabal/bin:/home/dev/.ghcup/bin:/home/dev/.local/bin:$PATH"
# Install Ormolu (Haskell formatter) as binary
# Quick native and WASM smoke tests to catch regressions early
RUN ghc --version && cabal --version && ( [ "${WITH_HLS}" = "1" ] && hls --version || echo "HLS not installed" ) || true

# Set up Cabal configuration (using default configuration)
RUN mkdir -p ~/.cabal
# Update Cabal index with caching
RUN --mount=type=cache,target=/home/dev/.cabal/store \
    --mount=type=cache,target=/home/dev/.cache \
    cabal update

# =============================================================================
# PRE-LOAD COMMON HASKELL DEPENDENCIES LAYER
# Copy dependency list for pre-loading
COPY build_context/deps-list.txt /tmp/deps-list.txt
# =============================================================================
# This layer pre-installs common dependencies to speed up project builds
# These are the most commonly used packages from the homeomorphosis project

# Create a temporary cabal project and pre-install dependencies
RUN mkdir -p /tmp/preload-deps && \
    cd /tmp/preload-deps && \
    echo "packages: ." > cabal.project && \
    echo "with-compiler: ghc" >> cabal.project && \
    echo "index-state: 2025-08-15T19:06:45Z" >> cabal.project && \
    echo "cabal-version: 2.0" > preload-deps.cabal && \
    echo "name:                preload-deps" >> preload-deps.cabal && \
    echo "version:             0.1.0" >> preload-deps.cabal && \
    echo "license:             MIT" >> preload-deps.cabal && \
    echo "build-type:          Simple" >> preload-deps.cabal && \
    echo "" >> preload-deps.cabal && \
    echo "library" >> preload-deps.cabal && \
    echo "  hs-source-dirs:      src" >> preload-deps.cabal && \
    echo "  default-language:    GHC2021" >> preload-deps.cabal && \
    echo "  default-extensions:  OverloadedStrings," >> preload-deps.cabal && \
    echo "                       DeriveGeneric," >> preload-deps.cabal && \
    echo "                       DerivingStrategies," >> preload-deps.cabal && \
    echo "                       GeneralizedNewtypeDeriving," >> preload-deps.cabal && \
    echo "                       StandaloneDeriving," >> preload-deps.cabal && \
    echo "                       LambdaCase," >> preload-deps.cabal && \
    echo "                       MultiWayIf," >> preload-deps.cabal && \
    echo "                       ImportQualifiedPost," >> preload-deps.cabal && \
    echo "                       TypeApplications," >> preload-deps.cabal && \
    echo "                       ScopedTypeVariables," >> preload-deps.cabal && \
    echo "                       NamedFieldPuns," >> preload-deps.cabal && \
    echo "                       RecordWildCards," >> preload-deps.cabal && \
    echo "                       DuplicateRecordFields," >> preload-deps.cabal && \
    echo "                       OverloadedRecordDot," >> preload-deps.cabal && \
    echo "                       DoAndIfThenElse" >> preload-deps.cabal && \
    echo "  build-depends:       $(cat /tmp/deps-list.txt | grep -v '^#' | grep -v '^$' | tr '\n' ',' | sed 's/,$//')" >> preload-deps.cabal && \
    mkdir -p src && \
    echo 'module PreloadDeps where' > src/PreloadDeps.hs && \
    echo "=== DEBUG: Generated cabal.project ===" && \
    cat cabal.project && \
    echo "=== DEBUG: Generated preload-deps.cabal ===" && \
    cat preload-deps.cabal && \
    echo "=== DEBUG: Dependencies from deps-list.txt ===" && \
    cat /tmp/deps-list.txt | grep -v '^#' | grep -v '^$' && \
    echo "=== DEBUG: Starting cabal build ===" && \
    cabal build --only-dependencies

# =============================================================================
# PRE-LOAD ADDITIONAL HASKELL DEPENDENCIES FOR HOMOMORPHOSIS PROJECT
# =============================================================================

# Create a second temporary cabal project for additional dependencies
RUN mkdir -p /tmp/preload-additional-deps && \
    cd /tmp/preload-additional-deps && \
    echo "packages: ." > cabal.project && \
    echo "with-compiler: ghc" >> cabal.project && \
    echo "index-state: 2025-08-15T19:06:45Z" >> cabal.project && \
    echo "cabal-version: 2.0" > preload-additional-deps.cabal && \
    echo "name:                preload-additional-deps" >> preload-additional-deps.cabal && \
    echo "version:             0.1.0" >> preload-additional-deps.cabal && \
    echo "license:             MIT" >> preload-additional-deps.cabal && \
    echo "build-type:          Simple" >> preload-additional-deps.cabal && \
    echo "" >> preload-additional-deps.cabal && \
    echo "library" >> preload-additional-deps.cabal && \
    echo "  hs-source-dirs:      src" >> preload-additional-deps.cabal && \
    echo "  default-language:    GHC2021" >> preload-additional-deps.cabal && \
    echo "  default-extensions:  OverloadedStrings, DeriveGeneric" >> preload-additional-deps.cabal && \
    echo "  build-depends:       \\" >> preload-additional-deps.cabal && \
    echo "    -- ESSENTIAL: Core web and communication libraries" >> preload-additional-deps.cabal && \
    echo "    base >= 4.16 && < 5," >> preload-additional-deps.cabal && \
    echo "    text >= 1.2 && < 3," >> preload-additional-deps.cabal && \
    echo "    bytestring >= 0.10 && < 1.3," >> preload-additional-deps.cabal && \
    echo "    aeson >= 1.5 && < 2.2," >> preload-additional-deps.cabal && \
    echo "    containers >= 0.6 && < 0.7," >> preload-additional-deps.cabal && \
    echo "    time >= 1.9 && < 1.14," >> preload-additional-deps.cabal && \
    echo "    \\" >> preload-additional-deps.cabal && \
    echo "    -- ESSENTIAL: WebSocket and HTTP server libraries" >> preload-additional-deps.cabal && \
    echo "    websockets >= 0.12 && < 0.14," >> preload-additional-deps.cabal && \
    echo "    wai >= 3.2 && < 3.9," >> preload-additional-deps.cabal && \
    echo "    wai-cors >= 0.1 && < 0.2," >> preload-additional-deps.cabal && \
    echo "    warp >= 3.3 && < 3.4," >> preload-additional-deps.cabal && \
    echo "    \\" >> preload-additional-deps.cabal && \
    echo "    -- ESSENTIAL: Miso frontend framework" >> preload-additional-deps.cabal && \
    echo "    miso >= 1.8 && < 1.9," >> preload-additional-deps.cabal && \
    echo "    \\" >> preload-additional-deps.cabal && \
    echo "    -- IMPORTANT: Concurrency and STM" >> preload-additional-deps.cabal && \
    echo "    stm >= 2.5 && < 2.6," >> preload-additional-deps.cabal && \
    echo "    \\" >> preload-additional-deps.cabal && \
    echo "    -- IMPORTANT: Process and system interaction" >> preload-additional-deps.cabal && \
    echo "    process >= 1.6 && < 1.7," >> preload-additional-deps.cabal && \
    echo "    directory >= 1.3 && < 1.4," >> preload-additional-deps.cabal && \
    echo "    filepath >= 1.4 && < 1.5," >> preload-additional-deps.cabal && \
    echo "    \\" >> preload-additional-deps.cabal && \
    echo "    -- USEFUL: Serialization and binary formats" >> preload-additional-deps.cabal && \
    echo "    serialise >= 0.2 && < 0.3," >> preload-additional-deps.cabal && \
    echo "    cborg >= 0.2 && < 0.3," >> preload-additional-deps.cabal && \
    echo "    \\" >> preload-additional-deps.cabal && \
    echo "    -- USEFUL: Logging and debugging" >> preload-additional-deps.cabal && \
    echo "    mtl >= 2.2 && < 2.4," >> preload-additional-deps.cabal && \
    echo "    transformers >= 0.5 && < 0.7," >> preload-additional-deps.cabal && \
    echo "    \\" >> preload-additional-deps.cabal && \
    echo "    -- OPTIONAL: Additional utilities" >> preload-additional-deps.cabal && \
    echo "    random >= 1.2 && < 1.3," >> preload-additional-deps.cabal && \
    echo "    uuid >= 1.3 && < 1.4," >> preload-additional-deps.cabal && \
    echo "    hashable >= 1.3 && < 1.5," >> preload-additional-deps.cabal && \
    echo "    unordered-containers >= 0.2 && < 0.3," >> preload-additional-deps.cabal && \
    echo "    \\" >> preload-additional-deps.cabal && \
    echo "    -- OPTIONAL: Template Haskell and code generation" >> preload-additional-deps.cabal && \
    echo "    template-haskell >= 2.16 && < 2.21," >> preload-additional-deps.cabal && \
    echo "    \\" >> preload-additional-deps.cabal && \
    echo "    -- OPTIONAL: Advanced type system features" >> preload-additional-deps.cabal && \
    echo "    lens >= 5.0 && < 5.3," >> preload-additional-deps.cabal && \
    echo "    profunctors >= 5.6 && < 5.7," >> preload-additional-deps.cabal && \
    echo "    \\" >> preload-additional-deps.cabal && \
    echo "    -- OPTIONAL: Testing and development tools" >> preload-additional-deps.cabal && \
    echo "    hspec >= 2.8 && < 2.12," >> preload-additional-deps.cabal && \
    echo "    quickcheck >= 2.14 && < 2.15," >> preload-additional-deps.cabal && \
    echo "    tasty >= 1.4 && < 1.5," >> preload-additional-deps.cabal && \
    echo "    tasty-hspec >= 1.1 && < 1.2" >> preload-additional-deps.cabal && \
    mkdir -p src && \
    echo 'module PreloadAdditionalDeps where' > src/PreloadAdditionalDeps.hs && \
    echo "=== DEBUG: Starting additional dependencies build ===" && \
    cabal build --only-dependencies

# Clean up temporary files
RUN rm -rf /tmp/preload-additional-deps

# Clean up temporary files
RUN rm -rf /tmp/preload-deps

# Clean up cabal store and cache
RUN cabal store gc --prune=all || true && rm -rf /home/dev/.cache/*
# Create helpful documentation and scripts
RUN mkdir -p ~/.local/bin && \
echo 'ghc --version' >> ~/.local/bin/show-haskell-versions && \
echo 'cabal --version' >> ~/.local/bin/show-haskell-versions && \
echo 'stack --version' >> ~/.local/bin/show-haskell-versions && \
echo 'echo ""' >> ~/.local/bin/show-haskell-versions && \
echo 'echo "=== WASM Toolchain ==="' >> ~/.local/bin/show-haskell-versions && \
echo 'wasm32-wasi-ghc-9.12.2.20250327 --version || echo "WASM GHC not available"' >> ~/.local/bin/show-haskell-versions && \
echo 'wasm-ld --version || echo "WASM linker not available"' >> ~/.local/bin/show-haskell-versions && \
chmod +x ~/.local/bin/show-haskell-versions
# Create usage documentation
RUN echo "# Haskell Layer: GHC 9.12.2 with WASM Support" > ~/README-haskell.md && \
    echo "- GHC 9.12.2 with native WebAssembly support" >> ~/README-haskell.md && \
    echo "- Cabal 3.16.0.0 for package management" >> ~/README-haskell.md && \
    echo "- Stack 3.7.1 for project management" >> ~/README-haskell.md && \
    echo "- Stack 3.7.1 for project management" >> ~/README-haskell.md && \
    echo "- Ormolu for code formatting" >> ~/README-haskell.md && \
    echo "- Python 3 with virtual environment for CI tools" >> ~/README-haskell.md && \
    echo "- Node.js and npm for web development" >> ~/README-haskell.md && \
    echo "- Pre-loaded common Haskell dependencies for faster builds" >> ~/README-haskell.md && \
    echo "- Miso frontend framework for web development" >> ~/README-haskell.md && \
    echo "- WebSocket and HTTP server libraries (wai, warp, websockets)" >> ~/README-haskell.md && \
    echo "- Serialization libraries (aeson, serialise, cborg)" >> ~/README-haskell.md && \
    echo "- Testing frameworks (hspec, tasty, quickcheck)" >> ~/README-haskell.md && \
    echo "- Advanced type system libraries (lens, profunctors)" >> ~/README-haskell.md && \
    echo "- jq and gh tools pre-installed in base layer" >> ~/README-haskell.md && \
    echo "" >> ~/README-haskell.md && \
    echo "## Quick Start" >> ~/README-haskell.md && \
    echo "" >> ~/README-haskell.md && \
    echo "### Check Haskell versions:" >> ~/README-haskell.md && \
    echo "```bash" >> ~/README-haskell.md && \
    echo "show-haskell-versions" >> ~/README-haskell.md && \
    echo "```" >> ~/README-haskell.md && \
    echo "" >> ~/README-haskell.md && \
    echo "### Create new project:" >> ~/README-haskell.md && \
    echo "```bash" >> ~/README-haskell.md && \
    echo "cabal init my-project" >> ~/README-haskell.md && \
    echo "cd my-project" >> ~/README-haskell.md && \
    echo "cabal build" >> ~/README-haskell.md && \
    echo "cabal run" >> ~/README-haskell.md && \
    echo "```" >> ~/README-haskell.md && \
    echo "" >> ~/README-haskell.md && \
    echo "### WebAssembly compilation:" >> ~/README-haskell.md && \
    echo "```bash" >> ~/README-haskell.md && \
    echo "# WASM support temporarily disabled - will be added in future update" >> ~/README-haskell.md && \
    echo "# ghc -target wasm32-wasi -o app.wasm Main.hs" >> ~/README-haskell.md && \
    echo "```" >> ~/README-haskell.md && \
    echo "" >> ~/README-haskell.md && \
    echo "### Miso frontend development:" >> ~/README-haskell.md && \
    echo "```bash" >> ~/README-haskell.md && \
    echo "# Create a Miso web application" >> ~/README-haskell.md && \
    echo "cabal init my-miso-app" >> ~/README-haskell.md && \
    echo "cd my-miso-app" >> ~/README-haskell.md && \
    echo "# Add miso to build-depends in .cabal file" >> ~/README-haskell.md && \
    echo "cabal build" >> ~/README-haskell.md && \
    echo "cabal run" >> ~/README-haskell.md && \
    echo "```" >> ~/README-haskell.md && \
    echo "" >> ~/README-haskell.md && \
    echo "### Add TeX support (for HASM applications):" >> ~/README-haskell.md && \
    echo "```bash" >> ~/README-haskell.md && \
    echo "# Use combined image with TeX layer" >> ~/README-haskell.md && \
    echo "docker run -it --rm -v $(pwd):/workspace \" >> ~/README-haskell.md && \
    echo "  ghcr.io/git-steb/haskell-tex-dev:full" >> ~/README-haskell.md && \
    echo "```" >> ~/README-haskell.md

# ---- Ship-ready cleanup (safe to remove; keeps runtime intact) ----
USER dev

# 1) Trim ghcup caches and orphaned toolchains
RUN ghcup gc -f || true && rm -rf ~/.ghcup/cache/*

# 2) Optional: remove HLS to keep image lean when WITH_HLS=0
RUN if [ "${WITH_HLS}" != "1" ]; then \
      rm -f ~/.ghcup/bin/hls* 2>/dev/null || true; \
    fi

# 3) Purge cabal store and index caches (no globally installed libs)
RUN cabal store gc --prune=all || true && rm -rf ~/.cache/* ~/.cabal/packages || true

# 4) Remove build artifacts if any slipped in
RUN rm -rf ~/dist-newstyle ~/Main.hs ~/Main.o || true

# 5) Strip large binaries where possible
USER root
RUN set -eux; \
    find /home/dev/.ghcup/bin -maxdepth 1 -type f -exec strip --strip-unneeded {} \; 2>/dev/null || true; \
    strip --strip-unneeded /usr/local/bin/ormolu 2>/dev/null || true

# 6) System cruft (docs, manpages) – keep minimal runtime libs
RUN rm -rf /usr/share/doc /usr/share/man /usr/share/info || true

# 7) Remove leftover package manager caches

# Labels for better image management
LABEL maintainer="git-steb"
LABEL org.opencontainers.image.source="https://github.com/git-steb/haskell-tex-dev"
LABEL org.opencontainers.image.description="Haskell layer with GHC 9.12.2 and WASM support"
LABEL org.opencontainers.image.title="Haskell TeX Dev - Haskell Layer"
LABEL layer="haskell"
LABEL features="haskell,ghc,wasm,wasm32-wasi,cabal,stack,ghcup"
LABEL usage="docker run -it --rm -v $(pwd):/workspace ghcr.io/git-steb/haskell-tex-dev:haskell"
LABEL version="v${VERSION}"
LABEL optimizations="preloaded-deps,jq-gh-tools"

# Switch to dev user for runtime
USER dev

# Set default command
CMD ["/bin/bash"]

