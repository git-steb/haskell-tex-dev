name: build-and-publish

on:
  pull_request:
  push:
    branches: [main]

permissions:
  contents: read
  packages: write

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Read version
        run: echo "VERSION=$(cat VERSION)" >> $GITHUB_ENV
      
      - name: Validate VERSION
        run: |
          set -euo pipefail
          [[ -s VERSION ]] || { echo "VERSION empty"; exit 1; }
          grep -Eq '^[0-9]+(\.[0-9]+){1,2}$' VERSION || { echo "Bad VERSION format"; exit 1; }
          echo "✅ VERSION validation passed: $VERSION"
      
      - uses: docker/setup-buildx-action@v3
      
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      # Build and push base layer
      - name: Build and push base layer
        uses: docker/build-push-action@v6
        with:
          context: .
          file: build_context/Dockerfile.base
          build-args: VERSION=${{ env.VERSION }}
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          load: true
          tags: |
            ghcr.io/git-steb/haskell-tex-dev:base-${{ github.sha }}
            ghcr.io/git-steb/haskell-tex-dev:base-latest
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true

      # Build and push haskell layer
      - name: Build and push haskell layer
        uses: docker/build-push-action@v6
        with:
          context: .
          file: build_context/Dockerfile.haskell
          build-args: |
            BASE_IMAGE=ghcr.io/git-steb/haskell-tex-dev:base-${{ github.sha }}
            VERSION=${{ env.VERSION }}
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          load: true
          tags: |
            ghcr.io/git-steb/haskell-tex-dev:haskell-${{ github.sha }}
            ghcr.io/git-steb/haskell-tex-dev:haskell-latest
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true

      # Build and push tex layer (full image)
      - id: tex
        name: Build and push tex layer
        uses: docker/build-push-action@v6
        with:
          context: .
          file: build_context/Dockerfile.tex
          build-args: |
            BASE_IMAGE=ghcr.io/git-steb/haskell-tex-dev:haskell-${{ github.sha }}
            VERSION=${{ env.VERSION }}
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          load: true
          tags: |
            ghcr.io/git-steb/haskell-tex-dev:tex-${{ github.sha }}
            ghcr.io/git-steb/haskell-tex-dev:tex-latest
            ghcr.io/git-steb/haskell-tex-dev:latest
            ghcr.io/git-steb/haskell-tex-dev:v${{ env.VERSION }}
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true

      - name: Test image functionality
        run: |
          set -euo pipefail
          echo "Testing image functionality..."
          echo "Version: $VERSION"
          
          # Test that the base image has the required tools
          echo "Testing base image tools..."
          docker run --rm ghcr.io/git-steb/haskell-tex-dev:base-${{ github.sha }} jq --version
          docker run --rm ghcr.io/git-steb/haskell-tex-dev:base-${{ github.sha }} gh --version
          
          # Test that the haskell image has the required tools
          echo "Testing haskell image tools..."
          docker run --rm ghcr.io/git-steb/haskell-tex-dev:haskell-${{ github.sha }} ghc --version
          docker run --rm ghcr.io/git-steb/haskell-tex-dev:haskell-${{ github.sha }} cabal --version
          
          # Test that the tex image has the required tools
          echo "Testing tex image tools..."
          docker run --rm ghcr.io/git-steb/haskell-tex-dev:tex-${{ github.sha }} latexmk -v
          
          echo "✅ All builds and tests passed!"

      # Atomic tagging - only on main branch pushes (after tests pass)
      - name: Tag latest and version tags atomically
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          set -euo pipefail
          IMG="ghcr.io/git-steb/haskell-tex-dev"
          DIGEST="${{ steps.tex.outputs.digest }}"
          
          echo "Creating atomic tags for version $VERSION using digest $DIGEST..."
          
          # Tag base layer
          docker buildx imagetools create \
            -t "$IMG:base-latest" \
            "$IMG:base-${{ github.sha }}"
          
          # Tag haskell layer
          docker buildx imagetools create \
            -t "$IMG:haskell-latest" \
            "$IMG:haskell-${{ github.sha }}"
          
          # Tag tex layer (full image) with all tags using exact digest
          docker buildx imagetools create \
            -t "$IMG:tex-latest" \
            -t "$IMG:latest" \
            -t "$IMG:v$VERSION" \
            "$IMG@${DIGEST}"
          
          echo "✅ Atomic tagging completed"

      - name: Build summary
        if: always()
        run: |
          echo "## Build and Publish Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version**: v$VERSION" >> $GITHUB_STEP_SUMMARY
          echo "**Event**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: ${{ github.ref }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ job.status }}" == "success" ]]; then
            echo "✅ **Base layer**: Built successfully" >> $GITHUB_STEP_SUMMARY
            echo "✅ **Haskell layer**: Built successfully" >> $GITHUB_STEP_SUMMARY
            echo "✅ **TeX layer**: Built successfully" >> $GITHUB_STEP_SUMMARY
            echo "✅ **Tool verification**: All tools available" >> $GITHUB_STEP_SUMMARY
            if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
              echo "✅ **Published tags**: latest, v$VERSION" >> $GITHUB_STEP_SUMMARY
            else
              echo "ℹ️ **Published**: No (PR build)" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "❌ **Build failed**" >> $GITHUB_STEP_SUMMARY
            echo "Check the logs above for details." >> $GITHUB_STEP_SUMMARY
          fi
