name: build

on:
  pull_request:
  push:
    branches-ignore: [main]

permissions:
  contents: read

concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true

jobs:
  haskell:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        ghc: [9.8.2, 9.10.1, 9.12.2]

    steps:
      - uses: actions/checkout@v4

      - name: Set up GHC / Cabal
        uses: haskell/actions/setup@v2
        with:
          ghc-version: ${{ matrix.ghc }}
          enable-stack: false
          cabal-version: latest

      - name: Cache Cabal store
        uses: actions/cache@v4
        with:
          path: |
            ~/.cabal/store
            dist-newstyle
          key: ${{ runner.os }}-cabal-${{ matrix.ghc }}-${{ hashFiles('**/cabal.project*', '**/*.cabal') }}
          restore-keys: |
            ${{ runner.os }}-cabal-${{ matrix.ghc }}-

      - name: Build
        run: cabal build all --enable-tests --flags="+ci"

      - name: Test
        run: cabal test all --test-options="--color=always"

      - name: Lint (hlint optional)
        if: hashFiles('.hlint.yaml') != ''
        run: hlint .

      - name: Upload hasm-shell binary (PR debug)
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: hasm-shell-${{ matrix.ghc }}
          path: dist-newstyle/**/build/**/hasm-shell/hasm-shell

  docker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Read version
        run: echo "VERSION=$(cat VERSION)" >> $GITHUB_ENV
      
      - uses: docker/setup-buildx-action@v3
      
      # Test build base layer (no push)
      - name: Test build base layer
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile.base
          build-args: VERSION=${{ env.VERSION }}
          push: false
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Test build haskell layer (no push)
      - name: Test build haskell layer
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile.haskell
          build-args: |
            BASE_IMAGE=ghcr.io/git-steb/haskell-tex-dev:base-latest
            VERSION=${{ env.VERSION }}
          push: false
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Test build tex layer (no push)
      - name: Test build tex layer
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile.tex
          build-args: |
            BASE_IMAGE=ghcr.io/git-steb/haskell-tex-dev:haskell-latest
            VERSION=${{ env.VERSION }}
          push: false
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test image functionality
        run: |
          echo "Testing image functionality..."
          echo "Version: $VERSION"
          
          # Test that the base image has the required tools
          echo "Testing base image tools..."
          docker run --rm ghcr.io/git-steb/haskell-tex-dev:base-latest jq --version
          docker run --rm ghcr.io/git-steb/haskell-tex-dev:base-latest gh --version
          
          # Test that the haskell image has the required tools
          echo "Testing haskell image tools..."
          docker run --rm ghcr.io/git-steb/haskell-tex-dev:haskell-latest ghc --version
          docker run --rm ghcr.io/git-steb/haskell-tex-dev:haskell-latest cabal --version
          
          echo "✅ All builds and tests passed!"

      - name: Build summary
        run: |
          echo "## Build Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Base layer**: Built successfully" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Haskell layer**: Built successfully" >> $GITHUB_STEP_SUMMARY
          echo "✅ **TeX layer**: Built successfully" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Tool verification**: All tools available" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version**: v$VERSION" >> $GITHUB_STEP_SUMMARY
          echo "**Status**: Ready for merge and publish" >> $GITHUB_STEP_SUMMARY
